name: Add Community from Issue

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  pull-requests: write
  issues: read

concurrency:
  group: add-community-${{ github.event.issue.number }}
  cancel-in-progress: false

jobs:
  propose:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure communities directory exists
        run: |
          mkdir -p _communities

      - name: Parse Issue Form
        id: issue-parser
        uses: stefanbuck/github-issue-parser@v3
        with:
          template-path: .github/ISSUE_TEMPLATE/add_community.yml

      - name: Validate fields and create filename
        run: |
          # Use environment variables to safely handle special characters
          NAME="${{ steps.issue-parser.outputs.issueparser_name }}"
          URL="${{ steps.issue-parser.outputs.issueparser_url }}"
          DESC="${{ steps.issue-parser.outputs.issueparser_description }}"
          TAGS="${{ steps.issue-parser.outputs.issueparser_tags }}"

          [ -n "$NAME" ] && [ -n "$URL" ] && [ -n "$DESC" ] || { echo "Missing required fields"; exit 1; }
          # Require http(s):// followed by at least one more character (reject bare 'http://')
          echo "$URL" | grep -Eqi '^https?://.+' || { echo "URL must start with http(s)://"; exit 1; }

          # Create a filename-safe version of the name
          FILENAME=$(echo "$NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          # Ensure filename is not empty and add .md extension
          [ -n "$FILENAME" ] || FILENAME="community-${{ github.event.issue.number }}"
          FILENAME="${FILENAME}.md"

          # Use printf to safely write to GITHUB_ENV with proper escaping
          printf 'NAME<<%s\n%s\n%s\n' "EOF_$(date +%s)" "$NAME" "EOF_$(date +%s)" >> "$GITHUB_ENV"
          printf 'URL<<%s\n%s\n%s\n' "EOF_$(date +%s)" "$URL" "EOF_$(date +%s)" >> "$GITHUB_ENV"
          printf 'DESC<<%s\n%s\n%s\n' "EOF_$(date +%s)" "$DESC" "EOF_$(date +%s)" >> "$GITHUB_ENV"
          printf 'TAGS<<%s\n%s\n%s\n' "EOF_$(date +%s)" "$TAGS" "EOF_$(date +%s)" >> "$GITHUB_ENV"
          printf 'FILENAME<<%s\n%s\n%s\n' "EOF_$(date +%s)" "$FILENAME" "EOF_$(date +%s)" >> "$GITHUB_ENV"

      - name: Create community markdown file
        env:
          SOURCE: "issue #${{ github.event.issue.number }} by @${{ github.event.issue.user.login }}"
          GITHUB_EVENT_ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          # Create a Python script to safely generate YAML
          cat > generate_yaml.py << 'PYTHON_EOF'
          import os
          import yaml
          import sys

          # Get environment variables
          name = os.getenv('NAME', '')
          url = os.getenv('URL', '')
          desc = os.getenv('DESC', '')
          tags_str = os.getenv('TAGS', '')
          source = os.getenv('SOURCE', '')
          filename = os.getenv('FILENAME', '')

          # Process tags
          tags = []
          if tags_str:
              tags = [tag.strip() for tag in tags_str.split(',') if tag.strip()]

          # Create data structure
          data = {
              'name': name,
              'link': url,
              'description': desc,
              'source': source,
              'tags': tags
          }

          # Generate YAML content
          yaml_content = yaml.dump(data, default_flow_style=False, allow_unicode=True, sort_keys=False)

          # Write to file
          with open(f'_communities/{filename}', 'w', encoding='utf-8') as f:
              f.write('---\n')
              f.write(yaml_content)
              f.write('---\n\n')
              f.write(f'<!-- Community added from GitHub issue #{os.getenv("GITHUB_EVENT_ISSUE_NUMBER", "")} -->\n')

          print(f"Successfully created _communities/{filename}")
          PYTHON_EOF

          # Run the Python script
          python3 generate_yaml.py

      - name: Verify file creation
        run: |
          echo "Created file: _communities/${{ env.FILENAME }}"
          echo "File contents:"
          cat "_communities/${{ env.FILENAME }}"

      - name: Create or update PR (draft = approval gate)
        uses: peter-evans/create-pull-request@v6
        with:
          branch: "add-community/issue-${{ github.event.issue.number }}"
          commit-message: "Add community from issue #${{ github.event.issue.number }}"
          title: "Add community: ${{ env.NAME }} (from #${{ github.event.issue.number }})"
          body: |
            Generated from issue #${{ github.event.issue.number }}.

            **Proposed entry**
            - **Name:** ${{ env.NAME }}
            - **Link:**  ${{ env.URL }}
            - **Description:** ${{ env.DESC }}
            - **Tags:** ${{ env.TAGS }}
            - **Source:** issue #${{ github.event.issue.number }} by @${{ github.event.issue.user.login }}
            - **File:** `_communities/${{ env.FILENAME }}`

            Maintainers: review/merge to incorporate.
          labels: community:automation
          add-paths: _communities/
          draft: true
          delete-branch: false
