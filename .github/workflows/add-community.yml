name: Add Community from Issue

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  pull-requests: write
  issues: read

concurrency:
  group: add-community-${{ github.event.issue.number }}
  cancel-in-progress: false

jobs:
  propose:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure communities directory exists
        run: |
          mkdir -p _communities

      - name: Parse Issue Form
        id: issue-parser
        uses: stefanbuck/github-issue-parser@v3
        with:
          template-path: .github/ISSUE_TEMPLATE/add_community.yml

      - name: Validate fields and create filename
        run: |
          # Use environment variables to safely handle special characters
          NAME="${{ steps.issue-parser.outputs.issueparser_name }}"
          URL="${{ steps.issue-parser.outputs.issueparser_url }}"
          DESC="${{ steps.issue-parser.outputs.issueparser_description }}"
          TAGS="${{ steps.issue-parser.outputs.issueparser_tags }}"

          [ -n "$NAME" ] && [ -n "$URL" ] && [ -n "$DESC" ] || { echo "Missing required fields"; exit 1; }
          # Require http(s):// followed by at least one more character (reject bare 'http://')
          echo "$URL" | grep -Eqi '^https?://.+' || { echo "URL must start with http(s)://"; exit 1; }

          # Create a filename-safe version of the name
          FILENAME=$(echo "$NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          # Ensure filename is not empty and add .md extension
          [ -n "$FILENAME" ] || FILENAME="community-${{ github.event.issue.number }}"
          FILENAME="${FILENAME}.md"

          # Write to temporary files to avoid shell escaping issues
          echo "$NAME" > /tmp/name.txt
          echo "$URL" > /tmp/url.txt
          echo "$DESC" > /tmp/desc.txt
          echo "$TAGS" > /tmp/tags.txt
          echo "$FILENAME" > /tmp/filename.txt

      - name: Create community markdown file
        env:
          SOURCE: "issue #${{ github.event.issue.number }} by @${{ github.event.issue.user.login }}"
          GITHUB_EVENT_ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          # Create a Python script to safely generate YAML
          cat > generate_yaml.py << 'PYTHON_EOF'
          import yaml
          import sys
          import os

          # Read from temporary files to avoid shell escaping issues
          with open('/tmp/name.txt', 'r', encoding='utf-8') as f:
              name = f.read().strip()
          with open('/tmp/url.txt', 'r', encoding='utf-8') as f:
              url = f.read().strip()
          with open('/tmp/desc.txt', 'r', encoding='utf-8') as f:
              desc = f.read().strip()
          with open('/tmp/tags.txt', 'r', encoding='utf-8') as f:
              tags_str = f.read().strip()
          with open('/tmp/filename.txt', 'r', encoding='utf-8') as f:
              filename = f.read().strip()

          source = os.getenv('SOURCE', '')

          # Process tags
          tags = []
          if tags_str:
              tags = [tag.strip() for tag in tags_str.split(',') if tag.strip()]

          # Create data structure
          data = {
              'name': name,
              'link': url,
              'description': desc,
              'source': source,
              'tags': tags
          }

          # Generate YAML content
          yaml_content = yaml.dump(data, default_flow_style=False, allow_unicode=True, sort_keys=False)

          # Write to file
          with open(f'_communities/{filename}', 'w', encoding='utf-8') as f:
              f.write('---\n')
              f.write(yaml_content)
              f.write('---\n\n')
              f.write(f'<!-- Community added from GitHub issue #{os.getenv("GITHUB_EVENT_ISSUE_NUMBER", "")} -->\n')

          print(f"Successfully created _communities/{filename}")
          PYTHON_EOF

          # Run the Python script
          python3 generate_yaml.py

      - name: Verify file creation
        run: |
          FILENAME=$(cat /tmp/filename.txt)
          echo "Created file: _communities/$FILENAME"
          echo "File contents:"
          cat "_communities/$FILENAME"

      - name: Create or update PR (draft = approval gate)
        run: |
          NAME=$(cat /tmp/name.txt)
          URL=$(cat /tmp/url.txt)
          DESC=$(cat /tmp/desc.txt)
          TAGS=$(cat /tmp/tags.txt)
          FILENAME=$(cat /tmp/filename.txt)

          # Set environment variables for the action
          echo "COMMUNITY_NAME=$NAME" >> $GITHUB_ENV
          echo "COMMUNITY_URL=$URL" >> $GITHUB_ENV
          echo "COMMUNITY_DESC=$DESC" >> $GITHUB_ENV
          echo "COMMUNITY_TAGS=$TAGS" >> $GITHUB_ENV
          echo "COMMUNITY_FILENAME=$FILENAME" >> $GITHUB_ENV

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          branch: "add-community/issue-${{ github.event.issue.number }}"
          commit-message: "Add community from issue #${{ github.event.issue.number }}"
          title: "Add community: ${{ env.COMMUNITY_NAME }} (from #${{ github.event.issue.number }})"
          body: |
            Generated from issue #${{ github.event.issue.number }}.

            **Proposed entry**
            - **Name:** ${{ env.COMMUNITY_NAME }}
            - **URL:**  ${{ env.COMMUNITY_URL }}
            - **Description:** ${{ env.COMMUNITY_DESC }}
            - **Tags:** ${{ env.COMMUNITY_TAGS }}
            - **Source:** issue #${{ github.event.issue.number }} by @${{ github.event.issue.user.login }}
            - **File:** `_communities/${{ env.COMMUNITY_FILENAME }}`

            Maintainers: review/merge to incorporate.
          labels: community:automation
          add-paths: _communities/
          draft: true
          delete-branch: false
